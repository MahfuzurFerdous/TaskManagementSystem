@model TaskCardViewModel

@{
    Layout = "_Layout";
}

<!-- Content Header (Page header) -->
<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0">Task Details</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="#">Home</a></li>
                    <li class="breadcrumb-item"><a href="#">Tasks</a></li>
                    <li class="breadcrumb-item active">Task Details</li>
                </ol>
            </div>
        </div>
    </div>
</div>

<!-- Main content -->
<section class="content">
    <div class="container-fluid">
        <div class="row">
            <!-- Left Side: Editable Task Details -->
            <div class="col-md-6">
                <div class="card card-primary">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="fas fa-tasks mr-2"></i>
                            Task Information
                        </h3>
                        <div class="card-tools">
                            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                <i class="fas fa-minus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div id="edit-task-container">
                            <div class="text-center p-5">
                                <i class="fas fa-spinner fa-spin fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Side: Status History + Standup Logs -->
            <div class="col-md-6">
                <!-- Status Change History -->
                <div class="card card-info">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="fas fa-history mr-2"></i>
                            Status Change History
                        </h3>
                        <div class="card-tools">
                            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                <i class="fas fa-minus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        @if (Model.StatusChanges != null && Model.StatusChanges.Count > 0)
                        {
                            <div class="timeline timeline-inverse">
                                @foreach (var change in Model.StatusChanges)
                                {
                                    <div class="time-label">
                                        <span class="bg-info">
                                            @change.ChangedAt.ToString("dd MMM yyyy")
                                        </span>
                                    </div>
                                    <div>
                                        <i class="fas fa-exchange-alt bg-success"></i>
                                        <div class="timeline-item">
                                            <span class="time">
                                                <i class="far fa-clock"></i>
                                                @change.ChangedAt.ToString("h:mm tt")
                                            </span>
                                            <h3 class="timeline-header">
                                                Status changed to
                                                <span class="badge badge-primary">@change.Status</span>
                                            </h3>
                                            <div class="timeline-body">
                                                <strong>Changed by:</strong> @change.ChangedBy
                                                @if (!string.IsNullOrEmpty(change.Remarks))
                                                {
                                                    <br />
                                                    <strong>Remarks:</strong> @change.Remarks
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                                <div>
                                    <i class="far fa-clock bg-gray"></i>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="callout callout-info">
                                <h5><i class="fas fa-info mr-1"></i> No History</h5>
                                <p>No status change history found for this task.</p>
                            </div>
                        }
                    </div>
                </div>

                <!-- Standup Logs -->
                <div id="standup-log-container">
                    @await Html.PartialAsync("_StandupLogPartial", Model.StandupLogList)
                </div>
            </div> <!-- End of Right Column -->

        </div> <!-- End of Row -->
    </div>
</section>

<script>
        function clearForm() {
        $('#standup-note').val('');
        $('#standup-message').html('');
    }


    function loadStandupLogs(taskId, page = 1) {
        $("#standup-log-container").html('<div class="text-center p-3"><i class="fas fa-spinner fa-spin"></i> Loading...</div>');

        $.get(`/TaskCard/GetStandupHistoryPartial?taskId=${taskId}&pageNumber=${page}`, function (html) {
            $("#standup-log-container").html(html);

            // Bind the form handler here AFTER partial is injected
            $('#standup-form').on('submit', function (e) {
                e.preventDefault();

                const note = $('#standup-note').val().trim();
                const taskId = $('#submit-standup-btn').data('task-id');

                if (!note) {
                    $('#standup-message').html('<div class="alert alert-warning">Note cannot be empty.</div>');
                    return;
                }

                $.ajax({
                    url: '/TaskCard/SubmitStandupLog',
                    type: 'POST',
                    data: {
                        taskId: taskId,
                        note: note
                    },
                    success: function (response) {
                        if (response.success) {
                            $('#standup-note').val('');
                            $('#standup-message').html('<div class="alert alert-success">Standup submitted successfully.</div>');
                            loadStandupLogs(taskId); 
                        } else {
                            $('#standup-message').html(`<div class="alert alert-danger">${response.message}</div>`);
                        }
                    },
                    error: function () {
                        $('#standup-message').html('<div class="alert alert-danger">An error occurred while submitting.</div>');
                    }
                });
            });
        }).fail(() => {
            toastr.error("Failed to load standup logs.");
        });
    }


    $(document).ready(function () {
        const taskId = @Model.Id;
    // Load edit partial
    $("#edit-task-container").load(`/TaskCard/Edit?id=${taskId}`, function (response, status, xhr) {
        if (status === "error") {
            $("#edit-task-container").html('<div class="alert alert-danger">Failed to load task form.</div>');
        } else {
            // Now attach submit handler AFTER form is loaded
            $(document).on('submit', '#editTaskForm', function (e) {
                console.log('editTaskForm submit intercepted');
                e.preventDefault();

                const form = this;
                const formData = new FormData(form);

                const submitBtn = $(form).find('button[type="submit"]');
                const originalText = submitBtn.html();

                submitBtn.html('<i class="fas fa-spinner fa-spin mr-1"></i> Saving...');
                submitBtn.prop('disabled', true);

                fetch(form.action, {
                    method: 'POST',
                    body: formData
                })
                    .then(response => {
                        if (!response.ok) throw new Error("Failed to update.");
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            toastr.success(data.message);
                            setTimeout(() => {
                                window.location.href = `/TaskCard/Details?id=${data.id}`;
                            }, 1000);
                        } else {
                            toastr.error(data.message || "Something went wrong.");
                        }
                    })
                    .catch(error => {
                        toastr.error(error.message);
                    })
                    .finally(() => {
                        submitBtn.html(originalText);
                        submitBtn.prop('disabled', false);
                    });
            });
        }
    });


        loadStandupLogs(taskId);

        $(document).on("click", ".standup-page-link", function (e) {
            e.preventDefault();
            const page = $(this).data("page");
            loadStandupLogs(taskId, page);
        });

        $('.select2').select2({
            theme: 'bootstrap4',
            placeholder: 'Select an option'
        });

        $(document).on('keypress', '.card-footer input', function (e) {
            if (e.which === 13) {
                $(this).siblings('.input-group-append').find('button').click();
            }
        });
    });
</script>
